/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminNewRouteImport } from './routes/admin/new'
import { Route as AdminLoginRouteImport } from './routes/admin/login'
import { Route as AdminStudentIdRouteImport } from './routes/admin/$studentId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminNewRoute = AdminNewRouteImport.update({
  id: '/admin/new',
  path: '/admin/new',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminLoginRoute = AdminLoginRouteImport.update({
  id: '/admin/login',
  path: '/admin/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminStudentIdRoute = AdminStudentIdRouteImport.update({
  id: '/admin/$studentId',
  path: '/admin/$studentId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin/$studentId': typeof AdminStudentIdRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin/new': typeof AdminNewRoute
  '/admin': typeof AdminIndexRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/$studentId': typeof AdminStudentIdRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin/new': typeof AdminNewRoute
  '/admin': typeof AdminIndexRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin/$studentId': typeof AdminStudentIdRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin/new': typeof AdminNewRoute
  '/admin/': typeof AdminIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin/$studentId'
    | '/admin/login'
    | '/admin/new'
    | '/admin'
    | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/$studentId'
    | '/admin/login'
    | '/admin/new'
    | '/admin'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/admin/$studentId'
    | '/admin/login'
    | '/admin/new'
    | '/admin/'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminStudentIdRoute: typeof AdminStudentIdRoute
  AdminLoginRoute: typeof AdminLoginRoute
  AdminNewRoute: typeof AdminNewRoute
  AdminIndexRoute: typeof AdminIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/new': {
      id: '/admin/new'
      path: '/admin/new'
      fullPath: '/admin/new'
      preLoaderRoute: typeof AdminNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/login': {
      id: '/admin/login'
      path: '/admin/login'
      fullPath: '/admin/login'
      preLoaderRoute: typeof AdminLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/$studentId': {
      id: '/admin/$studentId'
      path: '/admin/$studentId'
      fullPath: '/admin/$studentId'
      preLoaderRoute: typeof AdminStudentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminStudentIdRoute: AdminStudentIdRoute,
  AdminLoginRoute: AdminLoginRoute,
  AdminNewRoute: AdminNewRoute,
  AdminIndexRoute: AdminIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
